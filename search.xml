<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>你好世界</title>
    <url>/2021/11/07/%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>PHP开发APP微信支付接口之加签</title>
    <url>/2016/11/03/%E5%BE%AE%E4%BF%A1APP%E6%94%AF%E4%BB%98%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E4%B9%8B%E5%8A%A0%E7%AD%BE/</url>
    <content><![CDATA[<blockquote>
<p>这段时间在给一个iOS应用程序开发一个微信支付接口，之前并没有接触过微信支付，翻阅了一上午的微信开发文档，对其流程做了大致的了解后，便开始着手该接口程序的编写。 编写的过程中也遇到了各种各样的问题，各方查找资料，终于完成了该接口的开发。想到以后小伙伴们肯能会用的到，因此，我将整个接口的开发流程分享给大家。</p>
</blockquote>
<p>###【准备工作】<br>在准备着手开发之前呢，我建议大家先去查阅一下微信的&nbsp;<a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=8_1">APP支付开发者文档</a>&nbsp;，对微信支付开发的流程有一个系统的了解。</p>
<span id="more"></span>

<p>我这里为大家准备了一张交互时序图，以便大家随时查看：</p>
<p><img src="http://i.imgur.com/7Z2YzEI.png" alt="APP支付时序图"></p>
<p>#####商户系统和微信支付系统主要交互说明：</p>
<ol>
<li>用户在商户APP中选择商品，提交订单，选择微信支付。</li>
<li>商户后台收到用户支付单，调用微信支付统一下单接口。参见 <a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=9_1">【统一下单API】</a></li>
<li>统一下单接口返回正常的prepay_id，再按签名规范重新生成签名后，将数据传输给APP。参与签名的字段名为appId，partnerId，prepayId，nonceStr，timeStamp，package。注意：package的值格式为Sign=WXPay</li>
<li>商户APP调起微信支付。api参见本章节 <a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=8_5">【app端开发步骤说明】</a></li>
<li>商户后台接收支付通知。api参见 <a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=9_7">【支付结果通知API】</a></li>
<li>商户后台查询支付结果。api参见 <a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=9_2">【查询订单API】</a></li>
</ol>
<p>###【着手开发】<br>由于我们是做服务端，因此我们更关注服务端数据的处理，因此，跳过第一步。不过我们还是要先来模拟一些订单数据：</p>
<p>点击步骤2中的统一下单API的链接，我们可以看到我们请求接口时需要向其传输的一些参数，包括应用ID、商户号、设备号等等，我们只需向其传输必填项即可，选填数据可以根据自己的实际需求来决定。</p>
<p><img src="http://i.imgur.com/HxEiZZV.png" alt="商品信息数据"></p>
<p>appid 和 mch_id 分别去到微信开放平台和微信商户平台中获取，nonce_str (随机字符串) 很随意了，不长于32位就好。</p>
<pre><code>/**
 * 获取随机数；
 * @author 栗荣发 2016-09-18
 * @return String 返回生成的随机数；
 */
private function getNonceStr() &#123;
    $code = &quot;&quot;;
    for ($i=0; $i &gt; 10; $i++) &#123; 
        $code .= mt_rand(10000);
    &#125;
    $nonceStrTemp = md5($code);
    $nonce_str = mb_substr($nonceStrTemp, 5,37);
    return $nonce_str;
&#125;
</code></pre>
<p>notify_url（通知地址）是接收微信支付异步通知回调地址，通知url必须为直接可访问的url，不能携带参数。例如：’<a href="https://pay.weixin.qq.com/wxpay/pay.action&#39;">https://pay.weixin.qq.com/wxpay/pay.action&#39;</a></p>
<p>接下来是微信支付中最为关键的步骤之一：签名</p>
<p><img src="http://i.imgur.com/7KOAPCY.png" alt="签名算法"></p>
<p>在这里我编写了一个签名类，实例化该类的时候，同时初始化一些固定数据，例如appid 、 mch_id 等</p>
<pre><code>$encpt = new WeEncryption(APPID, MCHID, KEY);        //实例化签名类
$url = &quot;http://m.gkton.com/pay.php&quot;;
$encpt-&gt;setNotifyUrl($url);            //设置异步通知地址
</code></pre>
<p>再调用 WeEncryption::setNotifyUrl($url) 方法来设置异步通知回调地址，直到现在，我们所有需要向统一下单接口传输的数据已经全部准备完毕了，接下来就该为参数签名了：</p>
<pre><code>/**
 * 拼装请求的数据
 * @author 栗荣发 2016-09-18
 * @return  String 拼装完成的数据
 */
private function setSendData($data) &#123;
    $this-&gt;sTpl = &quot;&lt;xml&gt;
                       &lt;appid&gt;%s&lt;/appid&gt;
                       &lt;mch_id&gt;%s&lt;/mch_id&gt;
                       &lt;nonce_str&gt;%s&lt;/nonce_str&gt;
                       &lt;sign&gt;%s&lt;/sign&gt;
                       &lt;body&gt;%s&lt;/body&gt;
                       &lt;out_trade_no&gt;%s&lt;/out_trade_no&gt;
                       &lt;total_fee&gt;%d&lt;/total_fee&gt;
                       &lt;spbill_create_ip&gt;%s&lt;/spbill_create_ip&gt;
                       &lt;notify_url&gt;%s&lt;/notify_url&gt;
                       &lt;trade_type&gt;%s&lt;/trade_type&gt;
                    &lt;/xml&gt;&quot;;

    $nonce_str = $this-&gt;getNonceStr();            //参看上一步，获取随机数方法
    $sign = $this-&gt;getSign($data);
    $body = $data[&#39;body&#39;];
    $out_trade_no = $data[&#39;out_trade_no&#39;];
    $total_fee = $data[&#39;total_fee&#39;];
    $spbill_create_ip = $data[&#39;spbill_create_ip&#39;];
    $trade_type = $data[&#39;trade_type&#39;];

    $data = sprintf($this-&gt;sTpl, $this-&gt;appid, $this-&gt;mch_id, $nonce_str, $sign, $body, $out_trade_no, $total_fee, $spbill_create_ip, $this-&gt;notify_url, $trade_type);
    //拼装xml数据
    return $data;
&#125;

/**
 * 获取签名；
 * @author 栗荣发 2016-09-18
 * @return String 通过计算得到的签名；
 */
private function getSign($params) &#123;
    ksort($params);                    //将参数数组按照参数名字典序排序
    foreach ($params as $key =&gt; $item) &#123;
        if (!empty($item)) &#123;                //去除空参数值
            $newArr[] = $key.&#39;=&#39;.$item;            //生成新的数组
        &#125;
    &#125;
    $stringA = implode(&quot;&amp;&quot;, $newArr);        //将参数数组变为url键值对格式（即key1=value1&amp;key2=value2…）
    $stringSignTemp = $stringA.&quot;&amp;key=&quot;.$this-&gt;key;        //拼接key
    $sign = strtoupper(MD5($stringSignTemp));        //将字符串进行md5运算，并且全部转换为大写
    return $sign;                //返回签名
&#125;
</code></pre>
<p>到此，我们的准备工作已经完毕，可以开始向统一下单接口发起请求了。</p>
<p>这里，我编写了一个curl传输工具类来帮助我们请求该接口，并接受返回数据。</p>
<pre><code>&lt;?php 

class Curl &#123;

    private $ch;
    private $url;

    public function __construct()&#123;
        $this -&gt; ch = curl_init();
    &#125;

    /**
     * 设置一个请求链接
     * @author 栗荣发 2016-09-16
     * @param  String $url 请求的地址
     */
    public function setUrl($url)&#123;
        $this -&gt; url = $url;
    &#125;

    /**
     * 设置请求属性
     * @author 栗荣发 2016-09-16
     * @param  boolean $isHttps     是否采用https方式请求
     * @param  string  $requestType 请求方式
     */
    private function setopt($isHttps, $requestType, $data)&#123;
        curl_setopt($this-&gt;ch, CURLOPT_URL, $this -&gt; url);
        curl_setopt($this-&gt;ch, CURLOPT_HEADER, 0);
        curl_setopt($this-&gt;ch, CURLOPT_RETURNTRANSFER, 1);
        if ($isHttps) &#123;
            curl_setopt($this-&gt;ch, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($this-&gt;ch, CURLOPT_SSL_VERIFYHOST, 2);
        &#125;

        if (!empty($data)) &#123;
            curl_setopt($this-&gt;ch, CURLOPT_POSTFIELDS, $data);
        &#125;

        if ($requestType == &#39;POST&#39;) &#123;
            curl_setopt($this-&gt;ch, CURLOPT_POST, true);
        &#125;
    &#125;

    /**
     * 执行一个请求
     * @author 栗荣发 2016-09-16
     * @return resource 返回执行结果
     */
    public function execute($isHttps = false, $requestType = &#39;GET&#39;, $data = null)&#123;
        $this-&gt;setopt($isHttps, $requestType, $data);
        $content = curl_exec($this-&gt;ch);
        $this-&gt;close();
        return $content;
    &#125;

    /**
     * 关闭一个请求资源句柄
     * @author 栗荣发 2016-09-16
     */
    private function close()&#123;
        curl_close($this -&gt; ch);
    &#125;
&#125;
</code></pre>
<p>我们在客户端代码中实例化该工具类，调用 WeEncryption::sendRequest(Curl $curl, $data) 方法请求下单接口：</p>
<pre><code>$curl = new Curl();                //实例化传输类；
$xml_data = $encpt-&gt;sendRequest($curl, $data);        //发送请求
</code></pre>
<p>我们已经向下单接口发送请求，如果请求成功，微信会向我们返回一些数据：</p>
<p><img src="http://i.imgur.com/eGNyh4a.png" alt="返回数据"></p>
<p>好的，此时我们开始第三步 —— 二次签名。</p>
<p>我们重点关注一下返回数据中的 prepay_id，该参数是微信生成的预支付回话标识，用于后续接口调用中使用，该值有效期为2小时。</p>
<p>在第三步中我们得知：</p>
<ul>
<li>统一下单接口返回正常的prepay_id，再按签名规范重新生成签名后，将数据传输给APP。</li>
<li>参与签名的字段名为appId，partnerId，prepayId，nonceStr，timeStamp，package。</li>
</ul>
<p>因此，接下来我们先接收一下微信返回过来的数据：</p>
<pre><code>$xml_data = $encpt-&gt;sendRequest($curl, $data);        //发送请求
</code></pre>
<p>发送请求的同时，我们已经将返回数据保存到了变量 $xml_data 中，接下来，我们就要检查一下返回的数据，是否成功，如果成功则将数据重新生成签名返回给 APP 客户端：</p>
<pre><code>$postObj = $encpt-&gt;xmlToObject($xml_data);            //解析返回数据
if ($postObj === false) &#123;
    echo &#39;FAIL&#39;;
    exit;
&#125;
if ($postObj-&gt;return_code == &#39;FAIL&#39;) &#123;
    echo $postObj-&gt;return_msg;
&#125; else &#123;
    $resignData = array(
        &#39;appid&#39;    =&gt;    $postObj-&gt;appid,
        &#39;partnerId&#39;    =&gt;    $postObj-&gt;mch_id,
        &#39;prepayId&#39;    =&gt;    $postObj-&gt;prepay_id,
        &#39;nonceStr&#39;    =&gt;    $postObj-&gt;nonce_str,
        &#39;timeStamp&#39;    =&gt;    time(),
        &#39;package&#39;    =&gt;    &#39;Sign=WXPay&#39;
        );
    $sign = $encpt-&gt;getClientPay($resignData);
    echo $sign;
&#125;
</code></pre>
<p>上述代码中，我们先调用了 WeEncryption::xmlToObject($xml_data) 方法解析返回数据：</p>
<pre><code>/**
 * 解析xml文档，转化为对象
 * @author 栗荣发 2016-09-20
 * @param  String $xmlStr xml文档
 * @return Object         返回Obj对象
 */
public function xmlToObject($xmlStr) &#123;
    if (!is_string($xmlStr) || empty($xmlStr)) &#123;
        return false;
    &#125;
    $postObj = simplexml_load_string($xmlStr, &#39;SimpleXMLElement&#39;, LIBXML_NOCDATA);
    $postObj = json_decode(json_encode($postObj));
    return $postObj;
&#125;
</code></pre>
<p>如果返回数据无误，接着将重新参与签名的数据拼装好，在这里我需要提醒一下大家：</p>
<ul>
<li>package的值为Sign=WXPay不变，微信的大坑</li>
<li>时间戳使用time()获取就好</li>
<li>mch_id 即为 partnerId</li>
<li>其他数据可以使用微信返回的数据，也可以自己写</li>
</ul>
<p>最后调用 WeEncryption::getClientPay($data) 重新生成签名</p>
<pre><code>/**
 * 获取客户端支付信息
 * @author 栗荣发 2016-09-18
 * @param  Array $data 参与签名的信息数组
 * @return String       签名字符串
 */
public function getClientPay($data) &#123;
    $sign = $this-&gt;getSign($data);
    return $sign;
&#125;
</code></pre>
<p>将重新生成的签名传输给 APP 客户端。</p>
<p>###【结束】</p>
<p>至此，整个加签过程已经介绍完毕，下一节中我们在文中详细介绍验签的过程。</p>
<p>###【最后】<br>####附上WeEncryption源代码</p>
<pre><code>&lt;?php 

class WeEncryption &#123;

    private $sTpl;
    private $appid;
    private $mch_id;
    private $key;
    private $notify_url;

    /**
     * 构造函数，初始化成员变量
     * @author 栗荣发 2016-09-18
     * @param  String $appid  商户的应用ID
     * @param  Int $mch_id 商户编号
     * @param String $key 秘钥
     */
    public function __construct($appid, $mch_id, $key) &#123;
        if (is_string($appid) &amp;&amp; is_string($mch_id)) &#123;
            $this-&gt;appid = $appid;
            $this-&gt;mch_id = $mch_id;
            $this-&gt;key = $key;
        &#125;
    &#125;

    /**
     * 发送下单请求；
     * @author 栗荣发 2016-09-18
     * @param  Curl   $curl 请求资源句柄
     * @return mixed       请求返回数据
     */
    public function sendRequest(Curl $curl, $data) &#123;
        $data = $this-&gt;setSendData($data);
        $url = &quot;https://api.mch.weixin.qq.com/pay/unifiedorder&quot;;
        $curl-&gt;setUrl($url);
        $content = $curl-&gt;execute(true, &#39;POST&#39;, $data);
        return $content;
    &#125;

    /**
     * 拼装请求的数据
     * @author 栗荣发 2016-09-18
     * @return  String 拼装完成的数据
     */
    private function setSendData($data) &#123;
        $this-&gt;sTpl = &quot;&lt;xml&gt;
                           &lt;appid&gt;%s&lt;/appid&gt;
                           &lt;mch_id&gt;%s&lt;/mch_id&gt;
                           &lt;nonce_str&gt;%s&lt;/nonce_str&gt;
                           &lt;sign&gt;%s&lt;/sign&gt;
                           &lt;body&gt;%s&lt;/body&gt;
                           &lt;out_trade_no&gt;%s&lt;/out_trade_no&gt;
                           &lt;total_fee&gt;%d&lt;/total_fee&gt;
                           &lt;spbill_create_ip&gt;%s&lt;/spbill_create_ip&gt;
                           &lt;notify_url&gt;%s&lt;/notify_url&gt;
                           &lt;trade_type&gt;%s&lt;/trade_type&gt;
                        &lt;/xml&gt;&quot;;

        $nonce_str = $this-&gt;getNonceStr();
        $sign = $this-&gt;getSign($data);
        $body = $data[&#39;body&#39;];
        $out_trade_no = $data[&#39;out_trade_no&#39;];
        $total_fee = $data[&#39;total_fee&#39;];
        $spbill_create_ip = $data[&#39;spbill_create_ip&#39;];
        $trade_type = $data[&#39;trade_type&#39;];

        $data = sprintf($this-&gt;sTpl, $this-&gt;appid, $this-&gt;mch_id, $nonce_str, $sign, $body, $out_trade_no, $total_fee, $spbill_create_ip, $this-&gt;notify_url, $trade_type);
        return $data;
    &#125;

    /**
     * 设置通知地址
     * @author 栗荣发 2016-09-18
     * @param  String $url 通知地址；
     */
    public function setNotifyUrl($url) &#123;
        if (is_string($url)) &#123;
            $this-&gt;notify_url = $url;
        &#125;
    &#125;

    /**
     * 获取签名；
     * @author 栗荣发 2016-09-18
     * @return String 通过计算得到的签名；
     */
    private function getSign($params) &#123;
        ksort($params);
        foreach ($params as $key =&gt; $item) &#123;
            if (!empty($item)) &#123;
                $newArr[] = $key.&#39;=&#39;.$item;
            &#125;
        &#125;
        $stringA = implode(&quot;&amp;&quot;, $newArr);
        $stringSignTemp = $stringA.&quot;&amp;key=&quot;.$this-&gt;key;
        $sign = strtoupper(MD5($stringSignTemp));
        return $sign;
    &#125;

    /**
     * 获取随机数；
     * @author 栗荣发 2016-09-18
     * @return String 返回生成的随机数；
     */
    private function getNonceStr() &#123;
        $code = &quot;&quot;;
        for ($i=0; $i &gt; 10; $i++) &#123; 
            $code .= mt_rand(10000);
        &#125;
        $nonceStrTemp = md5($code);
        $nonce_str = mb_substr($nonceStrTemp, 5,37);
        return $nonce_str;
    &#125;

    /**
     * 获取客户端支付信息
     * @author 栗荣发 2016-09-18
     * @param  Array $data 参与签名的信息数组
     * @return String       签名字符串
     */
    public function getClientPay($data) &#123;
        $sign = $this-&gt;getSign($data);
        return $sign;
    &#125;

    /**
     * 接收支付结果通知参数
     * @author 栗荣发 2016-09-18
     * @return Object 返回结果对象；
     */
    public function getNotifyData() &#123;
        $postXml = $GLOBALS[&quot;HTTP_RAW_POST_DATA&quot;];    //接受通知参数；
        if (empty($postXml)) &#123;
            return false;
        &#125;
        $postObj = $this-&gt;xmlToObject($postXml);
        if ($postObj === false) &#123;
            return false;
        &#125;
        if (!empty($postObj-&gt;return_code)) &#123;
            if ($postObj-&gt;return_code == &#39;FAIL&#39;) &#123;
                return false;
            &#125;
        &#125;
        return $postObj;
    &#125;

    /**
     * 解析xml文档，转化为对象
     * @author 栗荣发 2016-09-20
     * @param  String $xmlStr xml文档
     * @return Object         返回Obj对象
     */
    public function xmlToObject($xmlStr) &#123;
        if (!is_string($xmlStr) || empty($xmlStr)) &#123;
            return false;
        &#125;
        $postObj = simplexml_load_string($xmlStr, &#39;SimpleXMLElement&#39;, LIBXML_NOCDATA);
        $postObj = json_decode(json_encode($postObj));
        return $postObj;
    &#125;
&#125;
</code></pre>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>技术</tag>
      </tags>
  </entry>
</search>
